{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Hooks useState boolean": {
    "prefix": "stateBoolean",
    "body": "const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState<boolean>(false)",
    "description": "useState boolean type"
  },
  "Hooks useState string": {
    "prefix": "stateString",
    "body": "const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState<string>('')",
    "description": "useState string type"
  },
  "Hooks useState number": {
    "prefix": "stateNumber",
    "body": "const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState<number>(0)",
    "description": "useState number type"
  },
  "Hooks useState any": {
    "prefix": "stateAny",
    "body": "const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState<any>(null)",
    "description": "useState any type"
  },
  "Hooks useState date": {
    "prefix": "stateDate",
    "body": "const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState<Date>()",
    "description": "useState date type"
  },
  "Hooks useState unknown": {
    "prefix": "stateUnknown",
    "body": "const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState<>(null)",
    "description": "useState unknown type"
  },
  "Hooks useState array string": {
    "prefix": "stateArrayString",
    "body": "const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState<Array<string>>([])",
    "description": "useState array string type"
  },
  "Hooks useState array number": {
    "prefix": "stateArrayString",
    "body": "const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState<Array<number>>([])",
    "description": "useState array number type"
  },
  "Hooks useState array any": {
    "prefix": "stateArrayAny",
    "body": "const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState<Array<any>>([])",
    "description": "useState array any type"
  },
  "Hooks useState array unknown": {
    "prefix": "stateArrayUnknown",
    "body": "const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState<Array<>>([])",
    "description": "useState array unknown type"
  },
  "Hooks useSelector": {
    "prefix": "reduxSelector",
    "body": "const ${1} = useSelector((state: StateType) => state)"
  },

  "Comment with author": {
    "prefix": "commentAuthor",
    "body": [
      "/**\r",
      " * @author Cal Vert Wong -\r",
      " * @contributors \"Add your name here\"\r",
      " * \r",
      " * ${1}\r",
      " * \r",
      " */"
    ],
    "description": "Comment block with author name"
  },
  "Arrow Function boilerplate": {
    "prefix": "afb",
    "body": "const ${1} = () => {}",
    "description": "arrow function boilerplate"
  }
}

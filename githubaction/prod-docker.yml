name: Prod-Docker-Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Run on ubuntu
    runs-on: ubuntu-latest

    steps:
      - name: Checkout files
        uses: actions/checkout@v2

      - name: Setup Docker
        uses: docker/setup-buildx-action@v2

      - name: Declare variables
        run: |
          # Get the commit message of the latest commit
          commit_message=$(git log -1 --pretty=%B ${{ github.sha }})
          # extract semver from commit message of release-to-main pull request
          release_version=$(echo "$commit_message" | sed -E 's/.*([vV][0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          # set semver to env variable if the semver is valid, else set nothing
          if [[ "$release_version" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "release_version=$release_version" >> $GITHUB_ENV
          else
            echo "release_version=" >> $GITHUB_ENV
          fi
          # add env variable called sha_short with the shorten commit hash as value
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # this should be called at all times
      - name: Build, tag and push image to Amazon ECR
        id: build-image-with-release-version
        if: ${{env.release_version}}
        run: |
          # build docker image
          npm run docker-build
          # tag docker image so that the workflow knows where to push the image to
          # "prod", semver and commit hash are appended for easy identification
          # Replace appName with docker image name
          docker tag appName:latest ${{secrets.ECR_REPO_URI}}/${{secrets.ECR_REPO_NAME}}:prod-${{env.release_version}}-${{env.sha_short}}
          docker push ${{secrets.ECR_REPO_URI}}/${{secrets.ECR_REPO_NAME}}:prod-${{env.release_version}}-${{env.sha_short}}
          echo "name=image::${{secrets.ECR_REPO_URI}}/${{secrets.ECR_REPO_NAME}}:prod-${{env.release_version}}-${{env.sha_short}}" >> $GITHUB_OUTPUT

      # this is a fallback step just in case semver is invalid, all pushes should be done through a pull request from a releases branch
      - name: Build, tag and push image to Amazon ECR (Invalid Release Version, needs attention)
        id: build-image-without-release-version-for-just-in-case
        if: ${{!env.release_version}}
        run: |
          # build docker image
          npm run docker-build
          # tag docker image so that the workflow knows where to push the image to
          # "prod" and commit hash are appended for easy identification
          # Replace appName with docker image name
          docker tag appName:latest ${{secrets.ECR_REPO_URI}}/${{secrets.ECR_REPO_NAME}}:prod-${{env.sha_short}}
          docker push ${{secrets.ECR_REPO_URI}}/${{secrets.ECR_REPO_NAME}}:prod-${{env.sha_short}}
          echo "name=image::${{secrets.ECR_REPO_URI}}/${{secrets.ECR_REPO_NAME}}:prod-${{env.sha_short}}" >> $GITHUB_OUTPUT
